{"ast":null,"code":"var _jsxFileName = \"/home/scott/Desktop/lets-play/client/src/components/Chat/ChatScreen.js\";\nimport React from \"react\";\nimport Chatkit from '@pusher/chatkit-client';\nimport RoomList from \"./RoomList\";\nimport MessageList from \"./MessageList\";\nimport NewRoomForm from \"./NewRoomForm\";\nimport SendMessageForm from \"./SendMessageForm\";\nimport \"./ChatScreen.css\";\n\nrequire(\"dotenv\").config();\n\nclass ChatScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomId: '',\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [] // username: localStorage.getItem(\"username\", userObject)\n\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: \"v1:us1:d763a976-7d94-4bf1-ab82-e3998634540e\",\n      userId: '5d5d5d9d61049e4e597c46ff',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/d763a976-7d94-4bf1-ab82-e3998634540e/token\"\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      console.log(currentUser);\n      this.currentUser = currentUser;\n      this.getRooms();\n    }).catch(err => console.log('error on connecting: ', err));\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms().then(joinableRooms => {\n      this.setState({\n        joinableRooms,\n        joinedRooms: this.currentUser.rooms\n      });\n    }).catch(err => console.log('error on joinableRooms: ', err));\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({\n      messages: []\n    });\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      messageLimit: 100,\n      hooks: {\n        onMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          });\n        }\n      }\n    }).then(room => {\n      this.setState({\n        roomId: room.id\n      });\n      this.getRooms();\n    }).catch(err => console.log('error on subscribing to room: ', err));\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(name) {\n    this.currentUser.createRoom({\n      name\n    }).then(room => this.subscribeToRoom(room.id)).catch(err => console.log('error with createRoom: ', err));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"personal-chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row justify-content-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card room-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body rooms-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(RoomList, {\n      subscribeToRoom: this.subscribeToRoom,\n      rooms: [...this.state.joinableRooms, ...this.state.joinedRooms],\n      roomId: this.state.roomId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-footer room-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(NewRoomForm, {\n      createRoom: this.createRoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"card message-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-body message-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      roomId: this.state.roomId,\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-footer message-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(SendMessageForm, {\n      disabled: !this.state.roomId,\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default ChatScreen;","map":{"version":3,"sources":["/home/scott/Desktop/lets-play/client/src/components/Chat/ChatScreen.js"],"names":["React","Chatkit","RoomList","MessageList","NewRoomForm","SendMessageForm","require","config","ChatScreen","Component","constructor","props","state","roomId","messages","joinableRooms","joinedRooms","sendMessage","bind","subscribeToRoom","getRooms","createRoom","componentDidMount","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","then","currentUser","console","log","catch","err","getJoinableRooms","setState","rooms","messageLimit","hooks","onMessage","message","room","id","text","name","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Chatkit from '@pusher/chatkit-client';\nimport RoomList from \"./RoomList\";\nimport MessageList from \"./MessageList\";\nimport NewRoomForm from \"./NewRoomForm\";\nimport SendMessageForm from \"./SendMessageForm\";\nimport \"./ChatScreen.css\"\nrequire(\"dotenv\").config();\n\nclass ChatScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      roomId: '',\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n      // username: localStorage.getItem(\"username\", userObject)\n    }\n    \n    this.sendMessage = this.sendMessage.bind(this)\n    this.subscribeToRoom = this.subscribeToRoom.bind(this)\n    this.getRooms = this.getRooms.bind(this)\n    this.createRoom = this.createRoom.bind(this)\n  }\n\n  componentDidMount() {\n\n    const chatManager = new Chatkit.ChatManager({\n        instanceLocator: \"v1:us1:d763a976-7d94-4bf1-ab82-e3998634540e\",\n        userId: '5d5d5d9d61049e4e597c46ff',\n        tokenProvider: new Chatkit.TokenProvider({\n            url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/d763a976-7d94-4bf1-ab82-e3998634540e/token\"\n        })\n    })\n    \n    chatManager\n      .connect()\n      .then(currentUser => {\n        console.log(currentUser)\n        this.currentUser = currentUser\n        this.getRooms()\n      })\n      .catch(err => console.log('error on connecting: ', err))\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms()\n    .then(joinableRooms => {\n        this.setState({\n            joinableRooms,\n            joinedRooms: this.currentUser.rooms\n        })\n    })\n    .catch(err => console.log('error on joinableRooms: ', err))\n}\n\n  subscribeToRoom(roomId) {\n    this.setState({ messages: [] })\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      messageLimit: 100,\n      hooks: {\n          onMessage: message => {\n              this.setState({\n                  messages: [...this.state.messages, message]\n              })\n          }\n        }\n    })\n      .then(room => {\n        this.setState({\n          roomId: room.id\n        })\n        this.getRooms()\n    })\n    .catch(err => console.log('error on subscribing to room: ', err))\n}\n    \n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    })\n  }\n\n  createRoom(name) {\n    this.currentUser.createRoom({\n        name\n    })\n    .then(room => this.subscribeToRoom(room.id))\n    .catch(err => console.log('error with createRoom: ', err))\n}\n\n  render() {\n    \n    return (\n      <div className=\"personal-chat\">\n            {/* input chatroom info for messaging */}\n        <div className=\"row justify-content-around\">\n          <div className=\"card room-card\">\n            <div className=\"card-body rooms-body\">\n            <RoomList\n                subscribeToRoom={this.subscribeToRoom}\n                rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n                roomId={this.state.roomId}\n              />\n            </div>\n            <div className=\"card-footer room-footer\">\n              <NewRoomForm createRoom={this.createRoom} />\n            </div>\n          </div>\n          <div className=\"card message-card\">\n            <div className=\"card-body message-body\">\n              <MessageList\n                roomId={this.state.roomId}\n                messages={this.state.messages} />\n            </div>\n            <div className=\"card-footer message-footer\">\n              <SendMessageForm\n                disabled={!this.state.roomId}\n                sendMessage={this.sendMessage}\n              />\n              </div>\n            </div>\n        </div>\n      </div>\n    )\n  }\n          \n}\n\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}