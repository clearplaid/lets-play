{"ast":null,"code":"var _jsxFileName = \"/home/scott/Desktop/lets-play/client/src/components/Chat/ChatScreen.js\";\nimport React from \"react\";\nimport Chatkit from '@pusher/chatkit-client';\nimport RoomList from \"./RoomList\";\nimport MessageList from \"./MessageList\";\nimport NewRoomForm from \"./NewRoomForm\";\nimport SendMessageForm from \"./SendMessageForm\";\nimport \"./ChatScreen.css\";\n\nrequire(\"dotenv\").config();\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createRoom = name => {\n      this.currentUser.createRoom({\n        name\n      }).then(room => this.subscribeToRoom(room.id)).catch(err => console.log('error with createRoom: ', err));\n    };\n\n    console.log(props);\n    this.state = {\n      roomId: '',\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [] // username: localStorage.getItem(\"username\", userObject)\n\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: \"v1:us1:d763a976-7d94-4bf1-ab82-e3998634540e\",\n      userId: '5d5d5d9d61049e4e597c46ff',\n      tokenProvider: new Chatkit.TokenProvider({\n        url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/d763a976-7d94-4bf1-ab82-e3998634540e/token\"\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.currentUser = currentUser;\n      this.getRooms();\n    }).catch(err => console.log('error on connecting: ', err));\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms().then(joinableRooms => {\n      this.setState({\n        joinableRooms,\n        joinedRooms: this.currentUser.rooms\n      });\n    }).catch(err => console.log('error on joinableRooms: ', err));\n  }\n\n  subscribeToRoom(roomId) {\n    this.setState({\n      messages: []\n    });\n    this.currentUser.subscribeToRoom({\n      roomId: \"25ab793b-4cc9-4ad8-ae7f-f74ca5265508\",\n      messageLimit: 100,\n      hooks: {\n        onNewMessage: message => {\n          this.setState({\n            messages: [...this.state.messages, message]\n          });\n        }\n      }\n    }).then(room => {\n      this.setState({\n        roomId: room.id\n      });\n      this.getRooms();\n    }).catch(err => console.log('error on subscribing to room: ', err));\n  }\n\n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: \"25ab793b-4cc9-4ad8-ae7f-f74ca5265508\"\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"personal-chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(RoomList, {\n      subscribeToRoom: this.subscribeToRoom,\n      rooms: [...this.state.joinableRooms, ...this.state.joinedRooms],\n      roomId: this.state.roomId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(NewRoomForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/home/scott/Desktop/lets-play/client/src/components/Chat/ChatScreen.js"],"names":["React","Chatkit","RoomList","MessageList","NewRoomForm","SendMessageForm","require","config","Profile","Component","constructor","props","createRoom","name","currentUser","then","room","subscribeToRoom","id","catch","err","console","log","state","roomId","messages","joinableRooms","joinedRooms","sendMessage","bind","getRooms","componentDidMount","chatManager","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","getJoinableRooms","setState","rooms","messageLimit","hooks","onNewMessage","message","text","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Chatkit from '@pusher/chatkit-client';\nimport RoomList from \"./RoomList\";\nimport MessageList from \"./MessageList\";\nimport NewRoomForm from \"./NewRoomForm\";\nimport SendMessageForm from \"./SendMessageForm\";\nimport \"./ChatScreen.css\"\nrequire(\"dotenv\").config();\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      roomId: '',\n      messages: [],\n      joinableRooms: [],\n      joinedRooms: [],\n      // username: localStorage.getItem(\"username\", userObject)\n    }\n    \n    this.sendMessage = this.sendMessage.bind(this)\n    this.subscribeToRoom = this.subscribeToRoom.bind(this)\n    this.getRooms = this.getRooms.bind(this)\n  }\n\n  componentDidMount() {\n\n    const chatManager = new Chatkit.ChatManager({\n        instanceLocator: \"v1:us1:d763a976-7d94-4bf1-ab82-e3998634540e\",\n        userId: '5d5d5d9d61049e4e597c46ff',\n        tokenProvider: new Chatkit.TokenProvider({\n            url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/d763a976-7d94-4bf1-ab82-e3998634540e/token\"\n        })\n    })\n    \n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.currentUser = currentUser\n        this.getRooms()\n      })\n      .catch(err => console.log('error on connecting: ', err))\n  }\n\n  getRooms() {\n    this.currentUser.getJoinableRooms()\n    .then(joinableRooms => {\n        this.setState({\n            joinableRooms,\n            joinedRooms: this.currentUser.rooms\n        })\n    })\n    .catch(err => console.log('error on joinableRooms: ', err))\n}\n\n  subscribeToRoom(roomId) {\n    this.setState({ messages: [] })\n    this.currentUser.subscribeToRoom({\n      roomId: \"25ab793b-4cc9-4ad8-ae7f-f74ca5265508\",\n      messageLimit: 100,\n      hooks: {\n          onNewMessage: message => {\n              this.setState({\n                  messages: [...this.state.messages, message]\n              })\n          }\n        }\n    })\n      .then(room => {\n        this.setState({\n          roomId: room.id\n        })\n        this.getRooms()\n    })\n    .catch(err => console.log('error on subscribing to room: ', err))\n}\n    \n  sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: \"25ab793b-4cc9-4ad8-ae7f-f74ca5265508\"\n    })\n  }\n\n  createRoom = name => {\n    this.currentUser.createRoom({\n        name\n    })\n    .then(room => this.subscribeToRoom(room.id))\n    .catch(err => console.log('error with createRoom: ', err))\n}\n\n  render() {\n    \n    return (\n      \n        <div className=\"personal-chat\">\n            {/* input chatroom info for messaging */}\n            <div className=\"row\">\n              <RoomList\n                subscribeToRoom={this.subscribeToRoom}\n                rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n                roomId={this.state.roomId}\n                />\n              <MessageList messages={this.state.messages} />\n            </div>\n            <div className=\"row\">\n              <NewRoomForm />\n              <SendMessageForm sendMessage={this.sendMessage} />\n            </div>\n        </div>\n    )\n  }\n          \n}\n\nexport default Profile;"]},"metadata":{},"sourceType":"module"}